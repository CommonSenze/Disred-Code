package me.commonsenze.minigames.Games.impl.Objects;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.UUID;
import java.util.stream.Stream;

import org.bukkit.Bukkit;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Item;
import org.bukkit.entity.Monster;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.block.BlockBreakEvent;
import org.bukkit.event.entity.EntityDeathEvent;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.event.player.PlayerPickupItemEvent;
import org.bukkit.inventory.ItemStack;

import com.comphenix.protocol.wrappers.EnumWrappers.TitleAction;
import com.google.gson.reflect.TypeToken;

import lombok.Getter;
import me.commonsenze.core.Core;
import me.commonsenze.core.Abstracts.Menu;
import me.commonsenze.core.Interfaces.Editor;
import me.commonsenze.core.Objects.Cuboid;
import me.commonsenze.core.Objects.ItemCreation;
import me.commonsenze.core.Util.CC;
import me.commonsenze.minigames.Minigames;
import me.commonsenze.minigames.Games.impl.AmongUs;
import me.commonsenze.minigames.Objects.User;

public class Task implements Listener {

	private UUID uuid;
	@Getter private Type type;
	@Getter private boolean completed, completing;
	@Getter private int amount;
	@Getter private static Editor editor;

	static {
		editor = Minigames.getInstance().getConfig(AmongUs.AMONGUS_FOLDER+"Task");
	}

	public Task(UUID uuid, Difficulty difficulty) {
		this.uuid = uuid;
		this.type = Type.byDifficulty(difficulty).skip(new Random().nextInt(Type.values().length-1)).findFirst().get();
		Bukkit.getPluginManager().registerEvents(this, Minigames.getInstance());
	}

	public boolean inTaskRegion(Player player) {
		Map<String, Object> json = Core.getGson().fromJson(editor.getConfig().getString(type.name() +".area"), new TypeToken<Map<String, Object>>() {}.getType());
		Cuboid cube = new Cuboid(json);
		return cube.contains(player.getLocation());
	}

	public void markCompleted() {
		this.completed = true;
		HandlerList.unregisterAll(this);
	}

	private boolean giveItems(Player player) {
		switch (type) {
		case THROW_TRASH:
			player.getInventory().setItem(4, new ItemCreation(Material.EMERALD).setAmount(10).toItemStack());
		case COLLECT_IRON: {
			Random random = new Random();
			Map<String, Object> json = Core.getGson().fromJson(editor.getConfig().getString(type.name() +".area"), new TypeToken<Map<String, Object>>() {}.getType());
			Cuboid cube = new Cuboid(json);
			for (int i = 0; i < 10; i++) {
				int x = random.nextInt(cube.getSizeX())+cube.getLowerX();
				int y = cube.getLowerY()+2;
				int z = random.nextInt(cube.getSizeZ())+cube.getLowerZ();
				cube.getWorld().dropItemNaturally(new Location(cube.getWorld(),x,y,z), new ItemCreation(Material.IRON_INGOT).toItemStack());
			}
		}
		case BREAK_BLOCK:
			return true;
		case SHOOT_MOBS:
			Random random = new Random();
			Map<String, Object> json = Core.getGson().fromJson(editor.getConfig().getString(type.name() +".mobarea"), new TypeToken<Map<String, Object>>() {}.getType());
			Cuboid cube = new Cuboid(json);
			for (int i = 0; i < 10; i++) {
				int x = random.nextInt(cube.getSizeX())+cube.getLowerX();
				int y = cube.getLowerY()+2;
				int z = random.nextInt(cube.getSizeZ())+cube.getLowerZ();
				cube.getWorld().spawnEntity(new Location(cube.getWorld(),x,y,z), EntityType.CREEPER);
			}
			
			player.getInventory().setItem(4, new ItemCreation(Material.BOW).addEnchantment(Enchantment.ARROW_INFINITE, 1).toItemStack());
			player.getInventory().setItem(9, new ItemCreation(Material.ARROW).toItemStack());
			return true;
		default:
			return false;
		}
	}

	private void removeItems(Player player) {
		switch (type) {
		case THROW_TRASH:
			player.getInventory().setItem(4, null);
			break;
		case SHOOT_MOBS:
			player.getInventory().setItem(4, null);
			player.getInventory().setItem(9, null);
			break;
		default:
			break;
		}
	}

	@EventHandler
	public void move(PlayerMoveEvent event) {
		if (!uuid.equals(event.getPlayer().getUniqueId()))return;
		if (isCompleted())return;
		if (inTaskRegion(event.getPlayer())&&!isCompleting()&&giveItems(event.getPlayer())) {
			this.completing = true;
		} else if (!inTaskRegion(event.getPlayer())&&isCompleting()) {
			this.completing = false;
			removeItems(event.getPlayer());
		}
	}

	@EventHandler
	public void interact(PlayerInteractEvent event) {
		if (!uuid.equals(event.getPlayer().getUniqueId()))return;
		if (isCompleted())return;
		if (event.getAction() != Action.RIGHT_CLICK_BLOCK)return;
		if (event.getClickedBlock().getType() != Material.STONE_BUTTON)return;
		if (inTaskRegion(event.getPlayer())&&!isCompleting()) {
			switch (type) {
			case CLICK_MENU:
				new Menu("Click Items", event.getPlayer(), 36) {

					@Override
					public void update() {}

					@Override
					public Menu create() {
						Random random = new Random();

						List<Integer> slots = new ArrayList<>();

						for (int i = 0; i < 5; i++) {
							int slot = random.nextInt(this.getInventory().getSize());
							while (slots.contains(slot)) {
								slot = random.nextInt(this.getInventory().getSize());
							}
							slots.add(slot);
						}

						for (int i = 0; i < slots.size(); i++) {
							setItem(slots.get(i), new ItemCreation(Material.STAINED_GLASS_PANE).setDurability((short)5)
									.setAmount(random.nextInt(5)+1).toItemStack());
						}
						return this;
					}

					@Override
					public void click(InventoryClickEvent e) {
						Task.this.clickMenu(e);
					}
				}.create().open();
				break;
			case MAKE_STACK:
				new Menu("Make Stack", event.getPlayer(), 36) {

					@Override
					public void update() {}

					@Override
					public Menu create() {
						setEditable(true);
						Random random = new Random();

						for (int i = 0; i < this.getInventory().getMaxStackSize(); i++) {
							int slot = random.nextInt(this.getInventory().getSize());
							setItem(slot, new ItemCreation(Material.STAINED_GLASS_PANE).setDurability((short)5).toItemStack());
						}
						return this;
					}

					@Override
					public void click(InventoryClickEvent e) {
						Task.this.makeStack(e);
					}
				}.create().open();
				break;
			default:
				return;
			}
			this.completing = true;
		}
	}

	@EventHandler
	public void collectIron(PlayerPickupItemEvent event) {
		if (!uuid.equals(event.getPlayer().getUniqueId()))return;
		if (isCompleted())return;
		if (type != Type.COLLECT_IRON)return;
		if (!inTaskRegion(event.getPlayer())) {
			if (amount != 0)amount = 0;
			return;
		}
		User user = Minigames.getInstance().getManagerHandler().getUserManager().getUser(event.getPlayer());
		ItemStack item = event.getItem().getItemStack();
		if (item.getType() == Material.IRON_INGOT) {
			amount++;
			if (amount == 10) {
				markCompleted();
				user.sendTitle(TitleAction.TITLE, CC.GREEN +"Task Completed");
				user.sendTitle(TitleAction.SUBTITLE, CC.GRAY +"You finished the Collect Iron Task");
			}
		}
	}

	@EventHandler
	public void throwTrash(PlayerDropItemEvent event) {
		if (!uuid.equals(event.getPlayer().getUniqueId()))return;
		if (isCompleted())return;
		if (type != Type.THROW_TRASH)return;
		if (!inTaskRegion(event.getPlayer()))return;
		User user = Minigames.getInstance().getManagerHandler().getUserManager().getUser(event.getPlayer());
		Item item = event.getItemDrop();
		Map<String, Object> json = Core.getGson().fromJson(Minigames.getInstance().getConfig(AmongUs.AMONGUS_FOLDER+"Task").getConfig().getString(Type.THROW_TRASH.name() +".trash-shoot"), new TypeToken<Map<String, Object>>() {}.getType());
		Cuboid cube = new Cuboid(json);

		Bukkit.getScheduler().runTaskTimer(Minigames.getInstance(), () -> {
			if (item.getItemStack().getType() == Material.DIRT) {
				if (cube.contains(item.getLocation())) {
					if (!event.getPlayer().getInventory().contains(Material.DIRT)) {
						markCompleted();
						user.sendTitle(TitleAction.TITLE, CC.GREEN +"Task Completed");
						user.sendTitle(TitleAction.SUBTITLE, CC.GRAY +"You finished the Throw Trash Task");
					}
				} else if (item.isOnGround()) {
					item.remove();
					user.getPlayer().getInventory().addItem(item.getItemStack());
					user.getPlayer().updateInventory();
				}
			}
		}, 1, 2);
	}

	@EventHandler
	public void throwTrash(EntityDeathEvent event) {
		if (!(event.getEntity() instanceof Monster))return;
		if (!uuid.equals(event.getEntity().getKiller().getUniqueId()))return;
		if (type != Type.SHOOT_MOBS)return;
		if (!inTaskRegion(event.getEntity().getKiller()))return;
		User user = Minigames.getInstance().getManagerHandler().getUserManager().getUser(event.getEntity().getKiller());

		amount++;
		if (amount == 5) {
			markCompleted();
			user.sendTitle(TitleAction.TITLE, CC.GREEN +"Task Completed");
			user.sendTitle(TitleAction.SUBTITLE, CC.GRAY +"You finished the Shoot Mobs Task");
		}
	}

	@EventHandler
	public void clickMenu(InventoryClickEvent event) {
		if (!uuid.equals(event.getWhoClicked().getUniqueId()))return;
		if (type != Type.CLICK_MENU)return;
		if (!inTaskRegion((Player)event.getWhoClicked()))return;
		User user = Minigames.getInstance().getManagerHandler().getUserManager().getUser((Player)event.getWhoClicked());
		ItemStack item = event.getCurrentItem();

		if (item == null)return;
		if (item.getType() == Material.STAINED_GLASS_PANE) {
			if (item.getAmount() == 1)
				event.getInventory().setItem(event.getSlot(), null);
			else event.getInventory().setItem(event.getSlot(), new ItemCreation(item).setAmount(item.getAmount()-1).toItemStack());
			if (!event.getView().getTopInventory().contains(Material.STAINED_GLASS_PANE)) {
				user.getPlayer().closeInventory();
				markCompleted();
				user.sendTitle(TitleAction.TITLE, CC.GREEN +"Task Completed");
				user.sendTitle(TitleAction.SUBTITLE, CC.GRAY +"You finished the Click Menu Task");
			}
		}
	}

	@EventHandler
	public void makeStack(InventoryClickEvent event) {
		if (!uuid.equals(event.getWhoClicked().getUniqueId()))return;
		if (type != Type.MAKE_STACK)return;
		if (!inTaskRegion((Player)event.getWhoClicked()))return;
		User user = Minigames.getInstance().getManagerHandler().getUserManager().getUser((Player)event.getWhoClicked());
		ItemStack item = event.getCurrentItem();

		if (item == null)return;
		if (item.getType() == Material.STAINED_GLASS_PANE) {
			if (event.getInventory().getItem(event.getRawSlot()).getAmount() == event.getInventory().getMaxStackSize()) {
				user.getPlayer().closeInventory();
				markCompleted();
				user.sendTitle(TitleAction.TITLE, CC.GREEN +"Task Completed");
				user.sendTitle(TitleAction.SUBTITLE, CC.GRAY +"You finished the Make Stack Task");
			}
		}
	}

	@EventHandler
	public void breakBlock(BlockBreakEvent event) {
		if (!uuid.equals(event.getPlayer().getUniqueId()))return;
		if (type != Type.BREAK_BLOCK)return;
		if (!inTaskRegion(event.getPlayer()))return;
		User user = Minigames.getInstance().getManagerHandler().getUserManager().getUser(event.getPlayer());

		if (event.getBlock().getType() == Material.IRON_BLOCK) {
			markCompleted();
			user.sendTitle(TitleAction.TITLE, CC.GREEN +"Task Completed");
			user.sendTitle(TitleAction.SUBTITLE, CC.GRAY +"You finished the Break Block Task");
		}
	}

	public static void setTaskArea(Type type, Cuboid cuboid) {
		editor.getConfig().set(type.name()+".area", Core.getGson().toJson(cuboid.serialize()));
		editor.saveConfig();
	}

	public enum Difficulty {
		SHORT, COMMON, LONG;
	}

	public enum Type {
		COLLECT_IRON(Difficulty.COMMON), THROW_TRASH(Difficulty.SHORT), SHOOT_MOBS(Difficulty.LONG),
		CLICK_MENU(Difficulty.COMMON),MAKE_STACK(Difficulty.SHORT), BREAK_BLOCK(Difficulty.LONG);

		@Getter private Difficulty difficulty;

		Type(Difficulty difficulty){
			this.difficulty = difficulty;
		}

		public static Stream<Type> byDifficulty(Difficulty difficulty) {
			return Stream.of(values()).filter(type -> type.getDifficulty() == difficulty);
		}
	}
}
