package me.commonsenze.website.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.google.gson.JsonObject;

import me.commonsenze.website.WebsiteApplication;
import me.commonsenze.website.Object.Category;
import me.commonsenze.website.Object.ForumThread;
import me.commonsenze.website.Object.Post;
import me.commonsenze.website.Object.Ratings;
import me.commonsenze.website.Object.Subcategory;
import me.commonsenze.website.Object.RequestPackets.UpdateRating;
import me.commonsenze.website.Respitory.CategoryRespitory;
import me.commonsenze.website.Respitory.PostRespitory;
import me.commonsenze.website.Respitory.RatingsRespitory;
import me.commonsenze.website.Respitory.SubcategoryRespitory;
import me.commonsenze.website.Respitory.ThreadRespitory;
import me.commonsenze.website.Util.RatingType;

@CrossOrigin(origins = "http://localhost:3000")
@RestController
@RequestMapping("api/forums")
public class ForumDataController {

	@Autowired
	private PostRespitory postRespitory;
	@Autowired
	private RatingsRespitory ratingsRespitory;
	@Autowired
	private SubcategoryRespitory subcategoryRespitory;
	@Autowired
	private ThreadRespitory threadRespitory;
	@Autowired
	private CategoryRespitory categoryRespitory;

	@PostMapping("upload/category")
	private List<Category> upload(@RequestBody Category category) {
		categoryRespitory.insert(category);
		return categoryRespitory.findAll();
	}
	
	

	@PostMapping("upload/post")
	private void upload(@RequestBody Post post) {
		postRespitory.insert(post);
	}

	@PostMapping("upload/thread")
	private ForumThread upload(@RequestBody ForumThread thread) {
//		threadRespitory.insert(thread);
		return thread;
	}
	
	@GetMapping("subcategory/{subcategoryId}/threads")
	private List<ForumThread> getThreads(@PathVariable("subcategoryId") String subcategoryId) {
		return threadRespitory.bySubcategory(subcategoryId);
	}

	@GetMapping("count/subcategory/{subcategoryId}/threads")
	private String getThreadAmount(@PathVariable("subcategoryId") String subcategoryId) {
		JsonObject obj = new JsonObject();

		obj.addProperty("amount", threadRespitory.bySubcategory(subcategoryId).size());
		return obj.toString();
	}
	
	@GetMapping("count/subcategory/{subcategoryId}/posts")
	private String getPostAmount(@PathVariable("subcategoryId") String subcategoryId) {
		JsonObject obj = new JsonObject();

		int amount = 0;
		
		for (ForumThread thread : threadRespitory.bySubcategory(subcategoryId)) {
			amount += thread.getReplies().size()+1;
		}
		
		obj.addProperty("amount", amount);
		return obj.toString();
	}

	@PostMapping("upload/subcategory")
	private String upload(@RequestBody Subcategory subcategory) {
		subcategoryRespitory.insert(subcategory);
		return subcategory.toJson();
	}

	@PostMapping("upload/rating")
	private void addRating(@RequestBody UpdateRating rating) {
		if (rating.isRemoving())
			ratingsRespitory.getRating(rating.getRatingUUID()).removeRating(rating.getRaterUniqueId());
		else
			ratingsRespitory.getRating(rating.getRatingUUID()).addRating(rating.getType(), rating.getRaterUniqueId());
	}

	@GetMapping("rating/profile/recieved")
	private String getRecievedRatings(@RequestParam("creator") String creator) {
		JsonObject obj = new JsonObject();

		for (RatingType type : RatingType.values()) {
			obj.addProperty(type.name(), 0);
		}

		for (Ratings rating : ratingsRespitory.byCreator(creator)) {
			for (RatingType type : RatingType.values()) {
				obj.addProperty(type.name(), rating.getTypeAmount(type));
			}
		}
		return obj.toString();
	}

	@GetMapping("rating/profile/sent")
	private String getSentRatings(@RequestParam("sender") String sender) {
		Map<RatingType, Integer> amounts = new HashMap<>();

		for (RatingType type : RatingType.values()) {
			amounts.putIfAbsent(type, 0);
		}

		for (Ratings rating : ratingsRespitory.findAll()) {
			for (RatingType type : rating.getRatings().keySet()) {
				Integer amount = amounts.putIfAbsent(type, 0);
				List<UUID> uuids = rating.getRatings().get(type);
				if (uuids != null&&uuids.contains(UUID.fromString(sender))) {
					amounts.put(type, amount != null ? amount+1 : 1);
				}
			}
		}
		return WebsiteApplication.getGson().toJson(amounts);
	}

	@GetMapping("list/category")
	private List<Category> listCategories() {
		return categoryRespitory.findAll();
	}

	@GetMapping("list/subcategory/{category}")
	private String listSubcategories(@PathVariable("category") String category) {
		return WebsiteApplication.getGson().toJson(subcategoryRespitory.byCategory(category));
	}

	@GetMapping("list/thread/{subcategoryId}")
	private String listThreads(@PathVariable("subcategoryId") String subcategoryId) {
		return WebsiteApplication.getGson().toJson(threadRespitory.bySubcategory(subcategoryId));
	}

	@GetMapping("list/post/{threadId}")
	private String listPosts(@PathVariable("threadId") String threadId) {
		return WebsiteApplication.getGson().toJson(postRespitory.byThread(threadId));
	}

	@GetMapping("ratings/{uuid}")
	private String getRatings(@PathVariable("uuid") String uuid) {
		return WebsiteApplication.getGson().toJson(ratingsRespitory.getRating(uuid));
	}
}
